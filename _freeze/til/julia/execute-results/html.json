{
  "hash": "022ff780616bdb42be2564b16429646a",
  "result": {
    "markdown": "---\ntitle: 'Quarto: Running a Julia notebook'\nformat: html\nimage: ../static/images/til/julia-rendered.png\ndate: '2023-06-04'\ncategories:\n  - quarto\n  - julia\nauthor: Carol Willing\nexecute:\n  freeze: true\n---\n\nThis is based on the [Quarto Julia docs](https://quarto.org/docs/computations/julia.html).\n\n## Setup\n\n1. Install [Julia](https://julialang.org/downloads/) for your operating system.\n\n2. Install [IJulia](https://github.com/JuliaLang/IJulia.jl). For this step, I use the Julia REPL. Enter pkg mode by pressing `]` and enter: `add IJulia`. This installs the IJulia kernel into the `.julia` directory in your home directory.\n\n3. From the Julia REPL, start a notebook server and kernel:\n\n```julia\nusing IJulia\nnotebook()\n```\n\nor alternatively install the Julia extension for VS Code.\n\n## Usage\n\n4. Create a new markdown file with the following front matter. The key item to include is `jupyter:` and the kernel to be used:\n\n```md\n---\ntitle: \"Quarto - Julia notebook\"\nformat: html\njupyter: julia-1.8\n---\n```\n\n5. From the command line, run `quarto preview` to start the preview server or `Render` in VS Code.\n\n::: {#69b155fe .cell execution_count=1}\n``` {.julia .cell-code}\nimport Pkg; Pkg.add(\"Plots\")\n```\n\n::: {.cell-output .cell-output-stderr}\n```\n   Resolving package versions...\n  No Changes to `~/.julia/environments/v1.8/Project.toml`\n  No Changes to `~/.julia/environments/v1.8/Manifest.toml`\n```\n:::\n:::\n\n\n## Parametric Plots\n\nPlot function pair (x(u), y(u)). \nSee @fig-parametric for an example.\n\n::: {#cell-fig-parametric .cell execution_count=2}\n``` {.julia .cell-code}\nusing Plots\n\nplot(sin, \n     x->sin(2x), \n     0, \n     2π, \n     leg=false, \n     fill=(0,:lavender))\n```\n\n::: {.cell-output .cell-output-display execution_count=8}\n![Parametric Plots](julia_files/figure-html/fig-parametric-output-1.svg){#fig-parametric}\n:::\n:::\n\n\nSee @fig-parametric-cos for another example.\n\n::: {#cell-fig-parametric-cos .cell execution_count=3}\n``` {.julia .cell-code}\nusing Plots\n\nplot(sin, \n     x->sin(4x), \n     0, \n     2π, \n     leg=false, \n     fill=(0,:pink))\n```\n\n::: {.cell-output .cell-output-display execution_count=9}\n![Sin Plots](julia_files/figure-html/fig-parametric-cos-output-1.svg){#fig-parametric-cos}\n:::\n:::\n\n\nYou should now see rendered charts with Julia.\n\n## VS Code\n\nHere's a rendering of the Julia document in VS Code.\n\n![Julia and Quarto in VS Code](../static/images/til/vscode-julia.png)\n\n",
    "supporting": [
      "julia_files"
    ],
    "filters": [],
    "includes": {}
  }
}